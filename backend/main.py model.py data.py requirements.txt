from fastapi import FastAPI
from model import create_lstm_model, preprocess_data
from data import get_bitcoin_data

app = FastAPI()

# Train model on startup
btc_data = get_bitcoin_data()
x_train, x_test, y_train, y_test, scaler = preprocess_data(btc_data)
model = create_lstm_model()
model.fit(x_train, y_train, epochs=10, batch_size=32)

@app.get("/suggest-trade")
def suggest_trade():
    predicted = model.predict(x_test[-1:])
    price = float(scaler.inverse_transform(predicted)[0][0])
    current_price = btc_data[-1][0]
    signal = "BUY" if price > current_price * 1.01 else "SELL"
    confidence = "High" if abs(price - current_price) > 500 else "Medium"

    return {
        "signal": signal,
        "confidence": confidence,
        "predicted_price": round(price, 2),
        "current_price": round(current_price, 2),
        "reason": "Based on trend reversal + RSI indicator"
    }
    import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

def create_lstm_model():
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=(60, 1)))
    model.add(LSTM(50))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')
    return model

def preprocess_data(prices):
    scaler = MinMaxScaler()
    scaled_prices = scaler.fit_transform(prices)

    def create_sequences(data, seq_length=60):
        x = []
        y = []
        for i in range(len(data) - seq_length):
            x.append(data[i:i+seq_length])
            y.append(data[i+seq_length])
        return np.array(x), np.array(y)

    x, y = create_sequences(scaled_prices)
    split = int(0.8 * len(x))
    return x[:split], x[split:], y[:split], y[split:], scaler
    import yfinance as yf
import pandas as pd

def get_bitcoin_data():
    data = yf.download('BTC-USD', start='2020-01-01', end='2024-01-01')
    return data['Close'].values.reshape(-1, 1)
    import yfinance as yf
import pandas as pd

def get_bitcoin_data():
    data = yf.download('BTC-USD', start='2020-01-01', end='2024-01-01')
    return data['Close'].values.reshape(-1, 1)
    fastapi
uvicorn
tensorflow
yfinance
pandas
numpy
scikit-learn
matplotlib
requests
